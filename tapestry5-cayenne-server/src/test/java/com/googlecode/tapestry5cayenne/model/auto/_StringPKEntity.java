package com.googlecode.tapestry5cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _StringPKEntity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _StringPKEntity extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> ID = Property.create("id", String.class);
    public static final Property<Integer> INT_PROP1 = Property.create("intProp1", Integer.class);
    public static final Property<String> STRING_PROP1 = Property.create("stringProp1", String.class);
    public static final Property<String> STRING_PROP2 = Property.create("stringProp2", String.class);

    protected String id;
    protected Integer intProp1;
    protected String stringProp1;
    protected String stringProp2;


    public void setId(String id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public String getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setIntProp1(Integer intProp1) {
        beforePropertyWrite("intProp1", this.intProp1, intProp1);
        this.intProp1 = intProp1;
    }

    public Integer getIntProp1() {
        beforePropertyRead("intProp1");
        return this.intProp1;
    }

    public void setStringProp1(String stringProp1) {
        beforePropertyWrite("stringProp1", this.stringProp1, stringProp1);
        this.stringProp1 = stringProp1;
    }

    public String getStringProp1() {
        beforePropertyRead("stringProp1");
        return this.stringProp1;
    }

    public void setStringProp2(String stringProp2) {
        beforePropertyWrite("stringProp2", this.stringProp2, stringProp2);
        this.stringProp2 = stringProp2;
    }

    public String getStringProp2() {
        beforePropertyRead("stringProp2");
        return this.stringProp2;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "id":
                return this.id;
            case "intProp1":
                return this.intProp1;
            case "stringProp1":
                return this.stringProp1;
            case "stringProp2":
                return this.stringProp2;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "id":
                this.id = (String)val;
                break;
            case "intProp1":
                this.intProp1 = (Integer)val;
                break;
            case "stringProp1":
                this.stringProp1 = (String)val;
                break;
            case "stringProp2":
                this.stringProp2 = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.id);
        out.writeObject(this.intProp1);
        out.writeObject(this.stringProp1);
        out.writeObject(this.stringProp2);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.id = (String)in.readObject();
        this.intProp1 = (Integer)in.readObject();
        this.stringProp1 = (String)in.readObject();
        this.stringProp2 = (String)in.readObject();
    }

}
