package edu.ndsu.eci.tapestry5cayenne.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import edu.ndsu.eci.tapestry5cayenne.model.Artist;
import edu.ndsu.eci.tapestry5cayenne.model.Bid;

/**
 * Class _AcceptedBid was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AcceptedBid extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ARTISTID_PK_COLUMN = "artistid";
    public static final String BIDID_PK_COLUMN = "bidid";

    public static final Property<Date> ACCEPTED_DATE = Property.create("acceptedDate", Date.class);
    public static final Property<Artist> ACCEPTOR = Property.create("acceptor", Artist.class);
    public static final Property<Bid> BID = Property.create("bid", Bid.class);

    protected Date acceptedDate;

    protected Object acceptor;
    protected Object bid;

    public void setAcceptedDate(Date acceptedDate) {
        beforePropertyWrite("acceptedDate", this.acceptedDate, acceptedDate);
        this.acceptedDate = acceptedDate;
    }

    public Date getAcceptedDate() {
        beforePropertyRead("acceptedDate");
        return this.acceptedDate;
    }

    public void setAcceptor(Artist acceptor) {
        setToOneTarget("acceptor", acceptor, true);
    }

    public Artist getAcceptor() {
        return (Artist)readProperty("acceptor");
    }

    public void setBid(Bid bid) {
        setToOneTarget("bid", bid, true);
    }

    public Bid getBid() {
        return (Bid)readProperty("bid");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "acceptedDate":
                return this.acceptedDate;
            case "acceptor":
                return this.acceptor;
            case "bid":
                return this.bid;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "acceptedDate":
                this.acceptedDate = (Date)val;
                break;
            case "acceptor":
                this.acceptor = val;
                break;
            case "bid":
                this.bid = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.acceptedDate);
        out.writeObject(this.acceptor);
        out.writeObject(this.bid);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.acceptedDate = (Date)in.readObject();
        this.acceptor = in.readObject();
        this.bid = in.readObject();
    }

}
